#!/bin/bash
#
# vim-spore: Manage Vim plug-ins in ~/.vim/bundle
#

# Version:
SPORE_VERSION=0.0.2

# Usage:
SPORE_USAGE="$(basename "$0") [-d] <command>

Options:
  -d        Dry run mode--see what commands will be run without doing anything

Commands:
  install   Install missing plug-ins
  update    Update each plug-in, installing any missing ones
  list      List all plug-ins registered in your vimrc
  version   Print version info
  help      Print this help message"

# Configuration:
VIM_DIR="$HOME/.vim"
VIMRC="$VIM_DIR/vimrc"
VIM_BUNDLE_DIR="$VIM_DIR/bundle"

#################################################
# Globals {{{
SPORE_CMD_PREFIX='"='
SPORE_DRY_RUN=0

SPORE_CMD=
SPORE_COUNT_INSTALLED=0
SPORE_COUNT_UPDATED=0
SPORE_COUNT_REMOVED=0
SPORE_COUNT_TOTAL=0
# }}}
# Utilities {{{
color () {
	case $1 in
		bold) tput bold ;;
		red) tput setaf 1 ;;
		green) tput setaf 2 ;;
		yellow) tput setaf 3 ;;
		blue) tput setaf 4 ;;
		magenta) tput setaf 5 ;;
		cyan) tput setaf 6 ;;
		reset) tput sgr0 ;;
	esac
}

echoc () {
	local echo_color=$1
	shift
	echo "$(color $echo_color)$*$(color reset)"
}

pretty_print_bundle () {
	local echo_color=$1
	local prefix=$2
	local repo_owner=$(github_owner $3)
	local repo_name=$(github_repo $3)
	if [[ -n "$4" ]]; then
		local message=" ($4)"
	else
		local message=
	fi

	echo -n "$prefix "
	echo "$(color $echo_color)$repo_owner/$(color bold)$repo_name$(color reset)$message"
}

notice () {
	echoc green $*
}

error () {
	echoc red $* >&2
}

debug () {
	echoc blue $* >&2
}

maybe () {
	if [[ $SPORE_DRY_RUN == 1 ]]; then
		# Workaround for quoted commands
		eval "debug '$*'"
	else
		eval $*
	fi
}

github_url () {
	echo "git@github.com:${1}.git"
}

github_repo () {
	echo "${1#*/}"
}

github_owner () {
	echo "${1%/*}"
}

bundle_subdir () {
	echo "${VIM_BUNDLE_DIR}/$(github_repo $1)"
}

ensure_bundle_dir () {
	[[ -d "$VIM_BUNDLE_DIR" ]] || maybe "mkdir -p $VIM_BUNDLE_DIR"
}

# Perform a git clone unless target directory exists
git_clone () {
	if [[ -d "$(bundle_subdir $1)" ]]; then
		error "$(bundle_subdir $1) already exists"
		return 1
	fi
	maybe "git clone '$(github_url $1)' '$(bundle_subdir $1)'"
}

# Perform a git submodule update --init if target directory exists
git_submodule_init () {
	maybe "cd $(bundle_subdir $1) && git submodule update --init"
}

# Perform a git pull if target directory exists
git_pull () {
	maybe "cd $(bundle_subdir $1) && git pull --ff-only"
}

git_install () {
	git_clone "$1" && git_submodule_init "$1"
}

git_update () {
	git_pull "$1"
	git_submodule_init "$1"
}

run_install () {
	maybe $*
}

print_summary () {
	echo
	if [[ $SPORE_CMD == bundle_list ]]; then
		notice "$SPORE_COUNT_TOTAL plug-ins in total."
	else
		notice "$SPORE_COUNT_INSTALLED new plug-in(s) installed, $SPORE_COUNT_UPDATED updated."
	fi
}
# }}}
# Commands {{{
bundle_install () {
	local bundle_name=$1
	shift

	if [[ -d "$(bundle_subdir $bundle_name)" ]]; then
		return
	fi
	notice "Installing ${bundle_name}..."
	git_install "$bundle_name"

	if [[ "$1" == build: ]]; then
		notice "Running build commands for ${bundle_name}..."
		# TODO this is a workaround - we really want to grab the quoted commands
		shift
		run_install $*
	fi

	SPORE_COUNT_INSTALLED=$(( SPORE_COUNT_INSTALLED + 1 ))
}

bundle_update () {
	notice "Updating ${1}..."
	git_update "$1"

	SPORE_COUNT_UPDATED=$(( SPORE_COUNT_UPDATED + 1 ))
}

bundle_list () {
	if [[ -d "$(bundle_subdir $1)" ]]; then
		pretty_print_bundle green + $1
	else
		pretty_print_bundle red - $1 "not installed"
	fi
}

bundle_update_or_install () {
	if [[ -d "$(bundle_subdir $1)" ]]; then
		bundle_update "$1"
	else
		bundle_install "$1"
	fi
}

bundle () {
	$SPORE_CMD $*
	SPORE_COUNT_TOTAL=$(( SPORE_COUNT_TOTAL + 1 ))
}

category () {
	echo
	echoc bold $*
}

vimrc () {
	local commands="$(grep $SPORE_CMD_PREFIX $VIMRC)"
	while read -r cmd; do
		cmd="${cmd#*=}"
		$cmd
	done <<< "$commands"
}

version () {
	echo "Spore version ${SPORE_VERSION}"
}

list () {
	SPORE_CMD=bundle_list
	vimrc
	print_summary
}

install () {
	SPORE_CMD=bundle_install
	ensure_bundle_dir
	vimrc
	print_summary
}

update () {
	SPORE_CMD=bundle_update_or_install
	vimrc
	print_summary
}

print_help () {
	echo "$SPORE_USAGE" >&2
}
# }}}
# Run {{{
# Process flags
while getopts ':d' option; do
	case "$option" in
		d)
			SPORE_DRY_RUN=1
			;;
		\?)
			error "$(printf "Illegal option: -%s\n" "$OPTARG")"
			print_help
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

# Dispatch main command
case $1 in
	install)
		install
		;;
	update)
		update
		;;
	list)
		list
		;;
	version)
		version
		;;
	help)
		print_help
		;;
	*)
		error "$(printf "Illegal command: %s\n" "$1")"
		print_help
		exit 1
		;;
esac
# }}}
# vim: foldmethod=marker
