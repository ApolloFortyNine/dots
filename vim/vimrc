" Plug-ins                                                                     {{{
" --------------------------------------------------------------------------------

if has("vim_starting")
  call plug#begin()

  " Use GitHub username if local source dir isn't set
  let $PLUG_SRC = exists('$CODE') ? $CODE : 'noahfrederick'

  " Color schemes
  Plug '$PLUG_SRC/vim-hemisu'
  Plug '$PLUG_SRC/vim-noctu'

  " General-purpose utilities
  Plug 'AndrewRadev/sideways.vim'
  Plug 'AndrewRadev/splitjoin.vim'
  Plug 'AndrewRadev/switch.vim',         { 'on': 'Switch' }
  Plug 'SirVer/ultisnips',               { 'on': [] }
  Plug 'Valloric/YouCompleteMe',         { 'on': [], 'do': './install.sh' }
  Plug 'airblade/vim-gitgutter'
  Plug 'godlygeek/tabular'
  Plug 'junegunn/fzf',                   { 'dir': '~/.fzf', 'do': 'yes n \| ./install' }
  Plug 'justinmk/vim-dirvish'
  Plug 'pgdouyon/vim-evanesco'
  Plug 'scrooloose/syntastic',           { 'on': [] }
  Plug 'talek/obvious-resize',           { 'on': ['ObviousResizeUp', 'ObviousResizeDown', 'ObviousResizeLeft', 'ObviousResizeRight'] }
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-commentary',           { 'on': ['<Plug>Commentary', '<Plug>CommentaryLine', '<Plug>ChangeCommentary'] }
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-obsession'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'cohama/lexima.vim',              { 'on': [] }
  Plug 'wellle/targets.vim'
  if has("mac")
    Plug '$PLUG_SRC/vim-codekit',        { 'on': ['CKadd', 'CKfocus', 'CKpreview', 'CKpause', 'CKunpause'] }
    Plug 'rizzatti/dash.vim',            { 'on': ['Dash', '<Plug>DashSearch', '<Plug>DashGlobalSearch'] }
  endif

  " Text objects
  Plug 'akiyan/vim-textobj-php',         { 'for': 'php' }
  Plug 'kana/vim-textobj-function'
  Plug 'kana/vim-textobj-user'
  Plug 'mattn/vim-textobj-url'
  Plug 'nelstrom/vim-textobj-rubyblock', { 'for': 'ruby' }
  Plug 'whatyouhide/vim-textobj-xmlattr'

  " Language-/framework-specific utilities
  Plug '$PLUG_SRC/vim-composer'
  Plug '$PLUG_SRC/vim-jekyll'
  Plug '$PLUG_SRC/vim-kohana'
  Plug '$PLUG_SRC/vim-laravel'
  Plug 'ap/vim-css-color'
  Plug 'dbakker/vim-lint',               { 'for': 'vim' }
  Plug 'dbakker/vim-sparkup',            { 'for': 'html' }
  Plug 'nelstrom/vim-markdown-folding',  { 'for': 'markdown' }
  Plug 'shawncplus/phpcomplete.vim',     { 'for': 'php' }
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-jdaddy',               { 'for': 'json' }
  Plug 'tpope/vim-rake'
  Plug 'tpope/vim-rbenv'
  Plug 'tpope/vim-scriptease'

  " File-type runtime files
  Plug 'blueyed/smarty.vim'
  Plug 'dag/vim-fish'
  Plug 'joedicastro/vim-pentadactyl'
  Plug 'kana/vim-vspec'
  Plug 'ledger/vim-ledger'
  Plug 'sheerun/vim-polyglot'

  call plug#end()

  " Load certain plug-ins on InsertEnter
  " (see https://github.com/junegunn/vim-plug/issues/48#issuecomment-67436470)
  augroup insert_mode_plugins
    autocmd!
    autocmd InsertEnter * call nox#plug#LoadInsert()
  augroup END

  augroup idle_plugins
    autocmd!
    autocmd CursorHold * call nox#plug#LoadIdle()
  augroup END

  if &t_Co >= 16
    silent! colorscheme noctu   " Set color scheme for 16-color+ terminals
  endif
endif

" }}}
" General settings                                                             {{{
" --------------------------------------------------------------------------------

"" Behavior
set encoding=utf-8              " Use UTF-8 as internal encoding
set spelllang=en_us             " Language and region to use for spellchecking
set modeline modelines=5        " Look for modeline in first/last n lines of file
set hidden                      " Do not unload buffers when no longer displayed
set autoread                    " Reload unchanged buffer when file changes
set foldnestmax=3               " Limit depth of nested syntax/indent folds to n
set foldopen-=block             " Do not open folds on '(', '{', etc.
set foldtext=nox#folding#Text()
set switchbuf=useopen,usetab
set lazyredraw                  " Do not redraw screen during macro execution
set formatoptions+=j            " Remove extra comment char when joining lines
set formatoptions+=r            " Insert comment leader after <Enter>
set formatoptions+=o            " Insert comment leader after o and O
set scrolloff=2                 " Keep n lines above/below cursor visible
set sidescrolloff=5             " Keep n columns left/right of cursor visible
if &shell =~# "fish$"
  set shell=/bin/bash           " Use a POSIX-compatible shell
endif
if has("mouse")
  set mouse=a                   " Enable mouse in all modes
endif

"" Display
set shortmess+=I                " Suppress intro message when starting Vim
set laststatus=2                " Always show status line
set helpheight=1000             " Maximize help window vertically
set previewheight=20            " Preview window used for, e.g., :Gstatus
set display+=lastline           " Show as much as possible of wrapped last line
set fillchars=vert:\ ,diff:\    " Use space for vertical split, diff fill char
if has("linebreak")
  set linebreak                 " Wrap lines at word boundaries
  set showbreak=...
  if exists("+breakindent")
    set breakindent             " Indent soft-wrapped lines
  endif
endif
set nowrap                      " Do not soft-wrap long lines by default
set listchars=tab:>\ ,extends:>,precedes:<,nbsp:+
if &termencoding ==# "utf-8" || &encoding ==# "utf-8"
  let &fillchars = "vert:\u2502,diff: "
  let &listchars = "tab:\u25b8 ,extends:\u276f,precedes:\u276e,nbsp:\u2334"
  if has("linebreak")
    let &showbreak = "\u21aa "
  endif
  highlight VertSplit ctermbg=NONE guibg=NONE
endif

"" Clipboard
if has("unnamedplus")
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

"" Command line and completion
set wildmenu                    " Show command line completion candidates
set wildmode=full               " 'wildchar' completes first match, no extra line of candidates shown
set wildcharm=<C-z>             " Trigger for completion in macros
set wildignore=*.swp,*.bak
set wildignore+=*.min.*,*.css.map
set wildignore+=*.jpg,*.png,*.gif
set suffixes+=.css,.html        " Extensions that get a lower priority when matching wildcards
set cmdheight=2                 " Reserve two lines for command area
set completeopt+=longest        " Only insert longest common string
set pumheight=8                 " Limit height of popup menu
set history=500                 " Keep 500 lines of command-line history

"" Whitespace
set autoindent
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode
set tabstop=4                   " Display width of tabs--indentation style is handled by sleuth.vim
set shiftround                  " Round indent to multiple of 'shiftwidth'
set nojoinspaces                " Do not insert two spaces after '.' when using J

"" Swaps, backups, and sessions
if !strlen($SUDO_USER) && has("unix")
  " Don't store swaps in . -- store in ~/.vim/tmp/swap/%path%to%orig.swp
  set directory=~/.vim/tmp/swap//,.,/var/tmp
  " Don't store backups in . -- store in ~/.vim/tmp/backup/%path%to%orig~
  set backupdir=~/.vim/tmp/backup//,.,/var/tmp
  " Create tmp/ dir if it doesn't exist
  if !isdirectory($HOME."/.vim/tmp") && exists("*mkdir")
    call mkdir($HOME."/.vim/tmp/swap", "p", 0700)
    call mkdir($HOME."/.vim/tmp/backup", "p", 0700)
  endif
else
  set nobackup
  set nowritebackup
  set noswapfile
endif
set sessionoptions-=options     " Do not save settings and mappings to sessions

"" Searching
set incsearch                   " Highlight first search match as you type
set smartcase                   " Case-sensitivity triggered by capital letter if 'ignorecase' set

if executable('ag')
  set grepprg=ag\ --vimgrep
  "                 |
  "                 `------------ Format results for Vim, include multiple matches per line
  set grepformat=%f:%l:%c:%m
else
  set grepprg=grep\ -rnH\ --exclude='.*.swp'\ --exclude='*~'\ --exclude=tags
  "                  |||
  "                  ||`--------- Always print file names
  "                  |`---------- Print line numbers
  "                  `----------- Search directories recursively
endif

"" Status line
let &statusline  = '%6*%{exists("*ObsessionStatus")?ObsessionStatus("\u25cf", "\u25cb"):""}'
let &statusline .= "%#StatusLineNC# %{StatuslineProject()}"
let &statusline .= "%* %f"
let &statusline .= "%#StatusLineNC#%{StatuslineGit()}%* "
let &statusline .= '%1*%{&modified && !&readonly?"\u25cf":""}%*'
let &statusline .= '%1*%{&modified && &readonly?"\u25cb":""}%*'
let &statusline .= '%2*%{&modifiable?"":"\u25cb"}%*'
let &statusline .= '%3*%{&readonly && &modifiable && !&modified?"\u25cb":""}%*'
let &statusline .= "%="
let &statusline .= "%#StatusLineNC#%{StatuslineIndent()}%* "
let &statusline .= '%#StatuslineNC#%{(strlen(&fileencoding) && &fileencoding !=# &encoding)?&fileencoding." ":""}'
let &statusline .= '%{&fileformat!="unix"?" ".&fileformat." ":""}%*'
let &statusline .= '%{strlen(&filetype)?&filetype." ":""}'
let &statusline .= '%#Error#%{exists("*SyntasticStatuslineFlag")?SyntasticStatuslineFlag():""}%*'

function! StatuslineGit()
  if !exists('*fugitive#head')
    return ''
  endif
  let l:out = fugitive#head(8)
  if l:out !=# ''
    let l:out = ' @ ' . l:out
  endif
  return l:out
endfunction

function! StatuslineIndent()
  if !&modifiable
    return ''
  endif

  if &expandtab == 0 && &tabstop == 8
    " Sleuth.vim has detected mixed indentation
    return "!!"
  endif

  let l:symbol = &expandtab ? "\u2022" : "\u21e5 "
  let l:amount = exists('*shiftwidth') ? shiftwidth() : &shiftwidth
  return &expandtab ? repeat(l:symbol, l:amount) : l:symbol
endfunction

function! StatuslineProject()
  if getcwd() == $HOME
    return "~"
  endif

  return fnamemodify(getcwd(), ':t')
endfunction

" Load matchit.vim, if a newer version isn't already installed
if !exists("g:loaded_matchit") && findfile("plugin/matchit.vim", &runtimepath) ==# ""
  runtime! macros/matchit.vim
endif

" }}}
" Autocommands                                                                 {{{
" --------------------------------------------------------------------------------

if has("autocmd")
  augroup vimrc
    autocmd!

    autocmd BufNewFile,BufRead *.snippets set filetype=snippets

    autocmd User ProjectionistActivate
          \ if &filetype !=# '' && &filetype !=# 'dirvish' |
          \   for [root, value] in projectionist#query("framework") |
          \     if &filetype . '.' !~# '\.' . value . '\.' |
          \       let &filetype = join([&filetype, value], ".") |
          \     endif |
          \   endfor |
          \ endif

    set cursorline

    " Only highlight cursor line in window with focus
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * if &filetype != 'qf' | set cursorline | endif

    autocmd QuickFixCmdPost *grep* cwindow

    highlight default link TrailingWhitespace ErrorMsg

    autocmd BufWinEnter * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd InsertEnter * if &modifiable | match TrailingWhitespace /\s\+\%#\@<!$/ | endif
    autocmd InsertLeave * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd BufWinLeave * if &modifiable | silent! call matchdelete(1) | endif

    " Never show line numbers in command-line window as they are not useful
    " and take up space (normally it inherits this setting like any other
    " window)
    autocmd CmdwinEnter * set nonumber

    if exists('##TermOpen')
      autocmd TermOpen *FZF execute "setlocal statusline=%2*" . repeat("\u2500", &columns)
    endif
  augroup END
endif

" }}}
" User-Defined Commands                                                        {{{
" --------------------------------------------------------------------------------

command! -bang -bar Bdelete call nox#buffer#Bdelete(<q-bang>)
command! -bang -nargs=? -complete=buffer Bufonly
      \ call nox#buffer#Bufonly(<q-args>, <q-bang>)
command! -nargs=0 -bar FollowSymlink call nox#path#FollowSymlink()
command! -bang -nargs=0 -bar Marks call nox#marks#Choose(<q-bang>)
command! -bang -nargs=? -bar -complete=filetype Scratch
      \ tabedit | if <q-bang> ==# '' | put | 1 | delete _ | endif
      \ | setlocal filetype=<args> buftype=nofile bufhidden=hide noswapfile
command! -nargs=0 -bar Unix set fileformat=unix
command! -bang -nargs=0 -bar Cd cd<bang> .

if exists("$NOTES")
  command! -nargs=1 -bang Notes lvimgrep<bang> /\<<args>\>/ $NOTES/**/*.md <Bar> lopen
  command! -nargs=0 -bang Note FZF<bang> $NOTES
  command! -nargs=0 -bar ShoppingList call nox#org#ShoppingList()
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command! DiffOrig vertical new | set buftype=nofile | read # | 0delete_
      \ | diffthis | wincmd p | diffthis

command! -nargs=0 -bar -bang Buffers call nox#fzf#Buffers(<bang>0)
command! -nargs=0 -bar -bang Tags call nox#fzf#Tags(<bang>0)
command! -nargs=0 -bar -bang Mru call fzf#run({
      \   'source':  v:oldfiles,
      \   'sink':    'edit<bang>',
      \   'options': '-m',
      \   'down':    20
      \ })
command! -nargs=0 -bar Colorscheme call fzf#run({
      \   'source':  map(globpath(&runtimepath, "colors/*.vim", 0, 1),
      \                  "fnamemodify(v:val, ':t:r')"),
      \   'sink':    'colorscheme',
      \   'options': '+m',
      \   'down':    20
      \ })
command! -nargs=0 -bar Lines call fzf#run({
      \   'source':  nox#fzf#BufferLines(),
      \   'sink':    function('nox#fzf#JumpToLine'),
      \   'options': '+m --reverse',
      \   'up':      20
      \ })

if !exists(":cdo")
  " 'Quickfix do' analogous to :argdo, :bufdo, etc.
  command! -nargs=1 Cdo  call nox#quickfix#Cdo(0, <q-args>)
  command! -nargs=1 Cfdo call nox#quickfix#Cdo(1, <q-args>)
endif

if executable('osascript')
  command! -nargs=? -bang -bar -complete=file Transmit call nox#transmit#Send(<q-bang>, <q-args>)
endif

if exists(":terminal")
  command! -nargs=0 -bang -bar Shell terminal<bang> $SHELL
endif

" }}}
" Mappings                                                                     {{{
" --------------------------------------------------------------------------------

let g:mapleader = "\<Space>"

" Try a custom command with fallback normal mode command
function! s:try(cmd, default)
  if exists(':' . a:cmd) && !v:count
    let tick = b:changedtick
    execute a:cmd
    if tick == b:changedtick
      execute join(['normal!', a:default])
    endif
  else
    execute join(['normal! ', v:count, a:default], '')
  endif
endfunction

" Try a custom command with fallback window command
function! s:try_wincmd(cmd, default)
  if exists(':' . a:cmd)
    let cmd = v:count ? join([a:cmd, v:count]) : a:cmd
    execute cmd
  else
    execute join([v:count, 'wincmd', a:default])
  endif
endfunction

" Flexibly define maps for SplitJoin with fallbacks
nnoremap <silent> J :<C-u>call <SID>try('SplitjoinJoin',  'J')<CR>
nnoremap <silent> S :<C-u>call <SID>try('SplitjoinSplit', "r\015")<CR>
nnoremap         gJ J
nnoremap         gS r<CR>

" The arrow keys are suitable for window resizing since it's not a common
" action and they can be mashed, unlike <C-w>+ etc.
nnoremap <silent>    <Up> :<C-u>call <SID>try_wincmd('ObviousResizeUp',    '+')<CR>
nnoremap <silent>  <Down> :<C-u>call <SID>try_wincmd('ObviousResizeDown',  '-')<CR>
nnoremap <silent>  <Left> :<C-u>call <SID>try_wincmd('ObviousResizeLeft',  '<')<CR>
nnoremap <silent> <Right> :<C-u>call <SID>try_wincmd('ObviousResizeRight', '>')<CR>

nnoremap <silent> <CR> :<C-u>call <SID>try('Switch', "\015")<CR>

nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

if exists(":tnoremap")
  tnoremap <A-h> <C-\><C-n><C-w>h
  tnoremap <A-j> <C-\><C-n><C-w>j
  tnoremap <A-k> <C-\><C-n><C-w>k
  tnoremap <A-l> <C-\><C-n><C-w>l

  tnoremap <Esc><Esc> <C-\><C-n>
endif

" Make Y consistent with C and D
nnoremap Y y$

" Paste over a visual selection while preserving the unnamed register
xnoremap P "_dP

" Q repeats the last command-line command (Ex mode is still accessible via gQ)
nnoremap Q @:

" Linewise movement should work on screen lines
noremap k gk
noremap j gj
noremap gk k
noremap gj j

" Clear search highlighting and any message already displayed
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Expand %% to directory of current file in command-line mode
cnoremap %% <C-r>=fnameescape(expand("%:~:h"))<CR>/

" Easier mapping to insert word under cursor when searching
cnoremap <expr> <Tab> getcmdtype() =~# '[/?]' ? "\<C-r>\<C-w>" : "\<C-z>"

" Use character under cursor as first character in digraph and replace it
" Ex.:
"   Pressing <Leader>k- on the 'e' in
"     habere
"   Makes
"     habēre
nnoremap <expr> <Leader>k nox#editing#NormalModeDigraph(nr2char(getchar()))

" Look up documentation with Dash.app
function! s:doc(cmd)
  if &keywordprg =~# "^man"
    return a:cmd
  endif
  return "K"
endfunction

nmap <expr> K  <SID>doc("\<Plug>DashSearch")
nmap <expr> gK <SID>doc("\<Plug>DashGlobalSearch")

" Remove the last character on current line:
" This is something I find myself doing often, but I find it difficult to hit
" '$' quickly. This has the added bonus of working on a range of lines and
" being repeatable.
noremap <silent> <Plug>RemoveLastCharacter :normal! $x<CR>
      \ :silent! call repeat#set("\<Plug>RemoveLastCharacter")<CR>
nmap <Leader>x <Plug>RemoveLastCharacter
xmap <Leader>x <Plug>RemoveLastCharacter

" Swap single and double quotes
noremap <silent> <Plug>SwapQuotesN :<C-u>keeppatterns
      \ s/['"]/\="'\""[submatch(0)!='"']/ge<CR>
      \ :silent! call repeat#set("\<Plug>SwapQuotesN")<CR>
noremap <silent> <Plug>SwapQuotesX :<C-u>keeppatterns
      \ '<,'>s/['"]/\="'\""[submatch(0)!='"']/ge<CR>
      \ :silent! call repeat#set("\<Plug>SwapQuotesX")<CR>
nmap <Leader>' <Plug>SwapQuotesN
xmap <Leader>' <Plug>SwapQuotesX

" Shortcut for inserting date and time in various formats
" from @tpope. The repeat(..., 0) makes it such that there's
" no output from <C-r>=
inoremap <silent> <C-g><C-t> <C-r>=repeat(complete(col('.'), map([
      \ "%Y-%m-%d %H:%M:%S",
      \ "%Y-%m-%d",
      \ "%Y %b %d",
      \ "%d-%b-%y",
      \ "%a, %d %b %Y %H:%M:%S %z",
      \ "%a %b %d %T %Z %Y"
      \ ], 'strftime(v:val)')), 0)<CR>

" <C-y> and <C-e> insert to end of word instead of single characters
" (Note that this clobbers <C-y>'s function when the completion popup is
" visible--this is by design, as it is cumbersome in combination with YCM's
" autocompletion)
inoremap <expr> <C-y> matchstr(getline(line('.') - 1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')
inoremap <expr> <C-e> matchstr(getline(line('.') + 1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')

" :help dispatch-commands
nnoremap <F2> :Make<CR>
nnoremap <F3> :Dispatch<CR>
nnoremap <F4> :Start<CR>

nnoremap <silent> - :Dirvish %:p:h<CR>

" Write a one-off timestamped version of the current buffer
nnoremap <Leader>T :write %:p:r_<C-r>=strftime('%Y%m%d-%H%M%S')<CR>.%:e<CR>

" Source selection or current line
xnoremap <Leader>S y:execute @@<CR>:echomsg "Sourced selection"<CR>
nnoremap <Leader>S ^vg_y:execute @@<CR>:echomsg "Sourced current line"<CR>

" Remove trailing whitespace, merge consecutive empty lines
nnoremap <silent> <Leader>w :call nox#editing#NormalizeWhitespace()<CR>

" Re-indent entire buffer content
nnoremap <silent> <Leader>= :call nox#editing#ReindentBuffer()<CR>

" Yank entire buffer content
nnoremap <silent> <Leader>y :call nox#editing#YankBuffer()<CR>

nnoremap <Leader>g<Space> :Git<Space>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gb :Gblame<CR>
xnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>g/ :Ggrep<Space>
if exists(":terminal")
  nnoremap <silent> <Leader>gg <C-w>v:lcd <C-r>=expand('%:p:h')<CR><Bar>terminal git graph -<C-r>=&lines-6<CR><CR>
else
  nnoremap <Leader>gg :Git graph<CR>
endif

nnoremap <Leader>t :Transmit<CR>

" Traversing folds
nnoremap <C-k> zMzkzv[zzt
nnoremap <C-j> zMzjzvzt

" sleuth.vim likes to change 'shiftwidth' to 8
nnoremap <Leader>4 :setlocal tabstop=4 softtabstop=4 shiftwidth=4<CR>

" Switch to alternate window or buffer
nnoremap <silent> <Leader>6 :if winnr("$") > 1
      \ <Bar>wincmd p<Bar>else<Bar>buffer #<Bar>endif<CR>

nnoremap <Leader>8 :set hlsearch<CR>*<C-o>
nnoremap <Leader>/ :Lines<CR>
map <BS> %

" Unimpaired.vim-like toggles
nnoremap [oo :set colorcolumn=+1<CR>
nnoremap ]oo :set colorcolumn=0<CR>
nnoremap coo :let &colorcolumn = ( &colorcolumn == "+1" ? "0" : "+1" )<CR>
nnoremap coS :SyntasticToggleMode<CR>

nnoremap [<Tab> :SidewaysLeft<CR>
nnoremap ]<Tab> :SidewaysRight<CR>

omap aa <Plug>SidewaysArgumentTextobjA
xmap aa <Plug>SidewaysArgumentTextobjA
omap ia <Plug>SidewaysArgumentTextobjI
xmap ia <Plug>SidewaysArgumentTextobjI

" Commentary maps, since it is loaded lazily
map  gc  <Plug>Commentary
nmap gcc <Plug>CommentaryLine
nmap cgc <Plug>ChangeCommentary
nmap gcu <Plug>Commentary<Plug>Commentary

" Force a file type
nnoremap _cs :set filetype=css<CR>
nnoremap _er :set filetype=eruby<CR>
nnoremap _ht :set filetype=html<CR>
nnoremap _js :set filetype=javascript<CR>
nnoremap _md :set filetype=markdown<CR>
nnoremap _ph :set filetype=php<CR>
nnoremap _py :set filetype=python<CR>
nnoremap _rb :set filetype=ruby<CR>
nnoremap _sh :set filetype=sh<CR>
nnoremap _tx :set filetype=text<CR>
nnoremap _vi :set filetype=vim<CR>
nnoremap _xm :set filetype=xml<CR>

" <Leader> mappings for navigating files and buffers
nnoremap <Leader><Leader> :
nnoremap <Leader>? :Mru<CR>
nnoremap <Leader>` :Marks<CR>
nnoremap <Leader>] :tjump /
nnoremap <Leader>D :edit README*<CR>
nnoremap <Leader>E :edit Gemfile<CR>
nnoremap <Leader>H :edit .htaccess<CR>
nnoremap <Leader>I :edit .gitignore<CR>
nnoremap <Leader>M :edit Makefile<CR>
nnoremap <Leader>R :edit Rakefile<CR>
nnoremap <Leader>U :edit Guardfile<CR>
if has('nvim')
  nnoremap <Leader>X :edit .nvimrc<CR>
else
  nnoremap <Leader>X :edit .vimrc<CR>
endif
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>d :FZF ~/src/dots<CR>
nmap     <Leader>e :edit %%<C-z><S-Tab>
nnoremap <Leader>f :FZF<CR>
nnoremap <Leader>n :Note<CR>

" }}}
" Plug-in Settings                                                             {{{
" --------------------------------------------------------------------------------

let g:UltiSnipsListSnippets = "<C-g><Tab>"
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
let g:UltiSnipsSnippetsDir = "~/.vim/snips"
let g:UltiSnipsSnippetDirectories = ["snips"]

let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1,
      \ 'html': 1,
      \ }
let g:ycm_complete_in_strings = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
" Remove <Tab> from maps lest YCM hijack our mapping from above
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']

" Disable splitjoin.vim maps (we define our own above)
let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''

let g:switch_mapping = ''

" Default of 'a' conflicts with Sideways argument text objects mapped above
let g:targets_argTrigger = 'A'

" :help syntastic-global-options
let g:syntastic_mode_map = { 'passive_filetypes': ['html', 'less'] }
if &termencoding ==# "utf-8" || &encoding ==# "utf-8"
  let g:syntastic_error_symbol         = "\u276f\u276f"
  let g:syntastic_warning_symbol       = "\u276f"
  let g:syntastic_style_error_symbol   = "\u276f\u276f"
  let g:syntastic_style_warning_symbol = "\u276f"
endif
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_enable_highlighting      = 0
let g:syntastic_stl_format = ' %E{%e' . g:syntastic_error_symbol
let g:syntastic_stl_format .= ' (line %fe)}'
let g:syntastic_stl_format .= '%B{ }'
let g:syntastic_stl_format .= '%W{%w' . g:syntastic_warning_symbol
let g:syntastic_stl_format .= ' (line %fw)} '

let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_php_checkers = ['php', 'phpcs']

let g:projectionist_heuristics = {
      \   "wordpress/|wp-config.php": {
      \     "*": { "framework": "wordpress" }
      \   }
      \ }

" Sparkup shadows the very useful <C-e> as well as <C-n>/<C-p>
let g:sparkupDoMaps = 0

let g:ledger_fold_blanks = 1

let g:markdown_fold_override_foldtext = 0

" Specify syntaxes to import for Markdown code blocks
let g:markdown_fenced_languages = ["sh", "vim", "ruby"]

let g:jekyll_dispatch = 'rake build'
let g:jekyll_start = 'rake watch'

" Prevent csv.vim from setting its own 'foldtext'
let g:csv_disable_fdt = 1

" :help ruby.vim
let g:ruby_no_comment_fold = 1

" :help menu.vim
let g:did_install_default_menus = 1
let g:did_install_syntax_menu = 1

let g:loaded_netrwPlugin = 1

" }}}
" Local vimrc                                                                  {{{
" --------------------------------------------------------------------------------

" Include a local configuration file if available. It is sourced at the end so
" that any local settings override those in this file.
runtime vimrc.local

" }}}
" vim: fdm=marker:sw=2:sts=2:et
