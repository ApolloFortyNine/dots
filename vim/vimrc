" Introduction                                                                 {{{
" --------------------------------------------------------------------------------
"
" This configuration has been cultivated since 2011. Care has been taken to do
" things "the right way" throughout and to document pieces of configuration
" that are not obvious at first glance.
"
" }}}
" Plug-ins                                                                     {{{
" --------------------------------------------------------------------------------

if has("vim_starting")
  call plug#begin()

  " Use GitHub username if local source dir isn't set
  let $PLUG_SRC = exists('$CODE') ? $CODE : 'noahfrederick'

  " Color schemes
  Plug '$PLUG_SRC/vim-hemisu'
  Plug '$PLUG_SRC/vim-noctu'

  " General-purpose utilities
  Plug 'AndrewRadev/sideways.vim',       { 'on': ['SidewaysLeft', 'SidewaysRight', '<Plug>SidewaysArgumentTextobjA', '<Plug>SidewaysArgumentTextobjI'] }
  Plug 'AndrewRadev/splitjoin.vim',      { 'on': ['SplitjoinJoin', 'SplitjoinSplit'] }
  Plug 'AndrewRadev/switch.vim',         { 'on': 'Switch' }
  Plug 'Raimondi/delimitMate'
  Plug 'SirVer/ultisnips',               { 'on': [] }
  Plug 'Valloric/YouCompleteMe',         { 'on': [], 'do': './install.sh' }
  Plug 'airblade/vim-gitgutter'
  Plug 'godlygeek/tabular'
  Plug 'jeetsukumaran/vim-filebeagle'
  Plug 'kien/ctrlp.vim',                 { 'on': ['CtrlP', 'CtrlPBuffer', 'CtrlPBookmarkDir', 'CtrlPBookmarkDirAdd', 'CtrlPTag', 'CtrlPLine', 'CtrlPMRU', 'CtrlPDir', 'CtrlPMixed', 'CtrlPRTS'] }
  Plug 'scrooloose/syntastic',           { 'on': [] }
  Plug 'talek/obvious-resize',           { 'on': ['ObviousResizeUp', 'ObviousResizeDown', 'ObviousResizeLeft', 'ObviousResizeRight'] }
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-obsession'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'wellle/targets.vim'
  if has("mac")
    Plug '$PLUG_SRC/vim-codekit',        { 'on': ['CKadd', 'CKfocus', 'CKpreview', 'CKpause', 'CKunpause'] }
    Plug 'rizzatti/dash.vim',            { 'on': ['Dash', '<Plug>DashSearch', '<Plug>DashGlobalSearch'] }
  endif

  " Text objects
  Plug 'akiyan/vim-textobj-php',         { 'for': 'php' }
  Plug 'kana/vim-textobj-function'
  Plug 'kana/vim-textobj-user'
  Plug 'mattn/vim-textobj-url'
  Plug 'nelstrom/vim-textobj-rubyblock', { 'for': 'ruby' }
  Plug 'whatyouhide/vim-textobj-xmlattr'

  " Language-/framework-specific utilities
  Plug '$PLUG_SRC/vim-jekyll'
  Plug '$PLUG_SRC/vim-kohana'
  Plug 'dbakker/vim-lint',               { 'for': 'vim' }
  Plug 'dbakker/vim-sparkup',            { 'for': 'html' }
  Plug 'nelstrom/vim-markdown-folding',  { 'for': 'markdown' }
  Plug 'shawncplus/phpcomplete.vim',     { 'for': 'php' }
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-rake'
  Plug 'tpope/vim-rbenv'
  Plug 'tpope/vim-scriptease'

  " File-type runtime files
  Plug 'dag/vim-fish'
  Plug 'kana/vim-vspec'
  Plug 'sheerun/vim-polyglot'
  Plug 'vim-scripts/smarty-syntax'

  call plug#end()

  " Load certain plug-ins on InsertEnter
  " (see https://github.com/junegunn/vim-plug/issues/48#issuecomment-67436470)
  augroup insert_mode_plugins
    autocmd!
    autocmd InsertEnter * call util#plug#LoadInsert()
  augroup END

  augroup idle_plugins
    autocmd!
    autocmd CursorHold * call util#plug#LoadIdle()
  augroup END

  if &t_Co >= 16
    silent! colorscheme noctu   " Set color scheme for 16-color+ terminals
  endif
endif

" }}}
" General settings                                                             {{{
" --------------------------------------------------------------------------------

"" Behavior
set encoding=utf-8              " Use UTF-8 as default file encoding
set spelllang=en_us             " Language and region to use for spellchecking
set modeline modelines=5        " Look for modeline at beginning/end of file
set hidden                      " Allow buffers to become hidden
set autoread                    " Reload unchanged buffer when file changes
set foldnestmax=3               " Limit depth of nested syntax/indent folds
set foldopen-=block             " Do not open folds on '(', '{', etc.
set foldtext=util#folding#Text()
set switchbuf=useopen,usetab
set lazyredraw                  " Do not redraw screen during macro execution
set formatoptions+=j            " Remove extra comment char when joining lines
set scrolloff=2                 " Keep lines above/below cursor visible
set sidescrolloff=5             " Keep columns left/right of cursor visible
if &shell =~# "fish$"
  set shell=/bin/bash           " Ensure shell is POSIX compatible
endif
if has("mouse")
  set mouse=a                   " Enable mouse in all modes
endif

"" Display
set shortmess+=I                " Suppress intro message when starting Vim
set laststatus=2                " Always show status line
set ruler                       " Show cursor position if status line not visible
set helpheight=1000             " Maximize help window vertically
set previewheight=20            " Preview window used for, e.g., :Gstatus
set display+=lastline           " Show as much as possible of wrapped last line
set fillchars=vert:\ ,diff:\    " Use space for vertical split, diff fill char
if has("linebreak")             " Wrap lines at word boundaries
  set linebreak
  set showbreak=...
  if exists("+breakindent")     " Indent soft-wrapped lines
    set breakindent
  endif
endif
set nowrap                      " Do not wrap long lines by default
set listchars=tab:>\ ,extends:>,precedes:<,nbsp:+
if &termencoding ==# "utf-8" || &encoding ==# "utf-8"
  let &fillchars = "vert:\u2502,diff: "
  let &listchars = "tab:\u25b8 ,extends:\u276f,precedes:\u276e,nbsp:\u2334"
  if has("linebreak")
    let &showbreak = "\u21aa"
  endif
  highlight VertSplit ctermbg=NONE guibg=NONE
endif

"" Clipboard
if has("unnamedplus")
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

"" Command line and completion
set wildmenu                    " Command line completion
set wildcharm=<C-z>
set wildignore=*.swp,*.bak
set wildignore+=*.min.*,*.css.map
set wildignore+=*.jpg,*.png,*.gif
set suffixes+=.css,.html        " Extensions that get a lower priority when matching wildcards
set cmdheight=2                 " Reserve two lines for command area
set completeopt+=longest        " Only insert longest common string
set pumheight=8                 " Limit height of popup menu
set history=500                 " Keep 500 lines of command-line history
set showcmd                     " Show incomplete key sequences
set path=.,**                   " Path used by gf, :find, et alia

"" Whitespace
set autoindent
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode
set tabstop=4                   " Width of displayed tabs--the rest is taken care of by sleuth.vim
set shiftround                  " Round indent to multiple of 'shiftwidth'
set nojoinspaces                " Do not insert two spaces after '.' when using J

"" Swaps, backups, and sessions
if !strlen($SUDO_USER) && has("unix")
  " Don't store swaps in . -- store in ~/.vim/tmp/swap/%path%to%orig.swp
  set directory=~/.vim/tmp/swap//,.,/var/tmp
  " Don't store backups in . -- store in ~/.vim/tmp/backup/%path%to%orig~
  set backupdir=~/.vim/tmp/backup//,.,/var/tmp
  " Create tmp/ dir if it doesn't exist
  if !isdirectory($HOME."/.vim/tmp") && exists("*mkdir")
    call mkdir($HOME."/.vim/tmp/swap", "p", 0700)
    call mkdir($HOME."/.vim/tmp/backup", "p", 0700)
  endif
else
  set nobackup
  set nowritebackup
  set noswapfile
endif
set sessionoptions-=options     " Do not save settings and mappings to sessions

"" Searching
set incsearch                   " Do incremental searching
set smartcase                   " Case-sensitivity triggered by capital letter if 'ignorecase' set

"" Status line
let g:statusline_separator_left = " \u27e9 "
let g:statusline_separator_right = " \u27e8 "

let &statusline = ""
let &statusline .= " %{getcwd()==$HOME?'~':fnamemodify(getcwd(), ':t')}"
let &statusline .= g:statusline_separator_left
let &statusline .= "%f"
let &statusline .= "%#StatusLineNC#%{StatuslineGit()}%* "
let &statusline .= '%1*%{&modified && !&readonly?"\u25cf":""}%*'
let &statusline .= '%1*%{&modified && &readonly?"\u25cb":""}%*'
let &statusline .= '%2*%{&modifiable?"":"\u25cb"}%*'
let &statusline .= '%3*%{&readonly && &modifiable && !&modified?"\u25cb":""}%*'
let &statusline .= "%="
let &statusline .= "%#StatuslineNC#%{strlen(&fileencoding)?&encoding:&fileencoding}"
let &statusline .= '%{&fileformat!="unix"?"  (".&fileformat.")":""}%* '
let &statusline .= '%{strlen(&filetype)?&filetype:"n/a"}'
let &statusline .= g:statusline_separator_right
let &statusline .= "%3.l:%-3.c "
let &statusline .= '%#Error#%{exists("*SyntasticStatuslineFlag")?SyntasticStatuslineFlag():""}%*'

" Git branch/commit in status line
function! StatuslineGit()
  if !exists('*fugitive#head')
    return ''
  endif
  let l:out = fugitive#head(8)
  if l:out !=# ''
    let l:out = ' @ ' . l:out
  endif
  return l:out
endfunction

" Load matchit.vim, if a newer version isn't already installed
if !exists("g:loaded_matchit") && findfile("plugin/matchit.vim", &runtimepath) ==# ""
  runtime! macros/matchit.vim
endif

" }}}
" Autocommands                                                                 {{{
" --------------------------------------------------------------------------------

if has("autocmd")
  augroup vimrc
    autocmd!

    " Prevent UltiSnips files from being hijacked by the conf filetype
    autocmd BufNewFile,BufRead *.snippets set filetype=snippets

    autocmd FileType c,cpp,css,javascript,php call util#filetype#MakeSemicolonMaps()
    autocmd FileType php,rubycall call util#filetype#MakeRocketMaps()

    autocmd FileType html,liquid,markdown,php,xhtml,xml call util#filetype#MakeXMLMaps()
    autocmd FileType html,liquid,xhtml,xml setlocal textwidth=120

    autocmd FileType css,html,javascript,json
          \ command! -nargs=0 -range=% -buffer JsBeautify <line1>,<line2>call util#format#JsBeautify()

    set cursorline

    " Only highlight cursor line in active buffer window
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * if &filetype != 'qf' | set cursorline | endif

    autocmd QuickFixCmdPost *grep* cwindow

    highlight! link TrailingWhitespace Error
    highlight! link MixedWhitespace TrailingWhitespace

    autocmd BufWinEnter * if &modifiable | match MixedWhitespace / \+\t\+/ | endif
    autocmd BufWinEnter * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd InsertEnter * if &modifiable | match TrailingWhitespace /\s\+\%#\@<!$/ | endif
    autocmd InsertLeave * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd BufWinLeave * if &modifiable | call clearmatches() | endif

    " Never show line numbers in command-line window as they are not useful
    " and take up space (normally it inherits this setting like any other
    " window)
    autocmd CmdwinEnter * set nonumber
  augroup END
endif

" }}}
" User-Defined Commands                                                        {{{
" --------------------------------------------------------------------------------

command! -bang -bar Bdelete call util#buffer#Bdelete(<q-bang>)
command! -bang -nargs=? -complete=buffer Bufonly
      \ call util#buffer#Bufonly(<q-args>, <q-bang>)
command! -nargs=0 -bar FollowSymlink call util#path#FollowSymlink()

if exists("$NOTES")
  function! s:complete_note(A, L, P)
    return util#path#CompleteHead($NOTES, '*.md', a:A, a:L, a:P)
  endfunction
  command! -bang Today execute "edit<bang> $LOGBOOK/" . strftime("%Y-%m-%d") . ".md"
  command! -nargs=1 -bang Notes lvimgrep<bang> /\<<args>\>/ $NOTES/**/*.md <Bar> lopen
  command! -nargs=1 -bang -complete=customlist,<SID>complete_note Note
        \ execute "edit<bang> $NOTES/" . fnameescape(<q-args>) . ".md"
  command! -nargs=0 -bar ShoppingList call util#ShoppingList()
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command! DiffOrig vertical new | set buftype=nofile | read # | 0delete_
      \ | diffthis | wincmd p | diffthis

" 'Quickfix do' analogous to :argdo, :bufdo, etc.
command! -nargs=1 Cdo     call util#Cdo(0, <q-args>)
command! -nargs=1 Cdofile call util#Cdo(1, <q-args>)

if executable('osascript')
  command! -nargs=? -bang -bar -complete=file Transmit call util#transmit#Send(<q-bang>, <q-args>)
endif

" }}}
" Mappings                                                                     {{{
" --------------------------------------------------------------------------------

let g:mapleader = "\<Space>"

" Try a custom command with fallback normal mode command
function! s:try(cmd, default)
  if exists(':' . a:cmd) && !v:count
    let tick = b:changedtick
    execute a:cmd
    if tick == b:changedtick
      execute join(['normal!', a:default])
    endif
  else
    execute join(['normal! ', v:count, a:default], '')
  endif
endfunction

" Try a custom command with fallback window command
function! s:try_wincmd(cmd, default)
  if exists(':' . a:cmd)
    let cmd = v:count ? join([a:cmd, v:count]) : a:cmd
    execute cmd
  else
    execute join([v:count, 'wincmd', a:default])
  endif
endfunction

" Flexibly define maps for SplitJoin with fallbacks
nnoremap <silent> J :<C-u>call <SID>try('SplitjoinJoin',  'J')<CR>
nnoremap <silent> S :<C-u>call <SID>try('SplitjoinSplit', "r\015")<CR>
nnoremap         gJ J
nnoremap         gS r<CR>

" The arrow keys are suitable for window resizing since it's not a common
" action and they can be mashed, unlike <C-w>+ etc.
nnoremap <silent>    <Up> :<C-u>call <SID>try_wincmd('ObviousResizeUp',    '+')<CR>
nnoremap <silent>  <Down> :<C-u>call <SID>try_wincmd('ObviousResizeDown',  '-')<CR>
nnoremap <silent>  <Left> :<C-u>call <SID>try_wincmd('ObviousResizeLeft',  '<')<CR>
nnoremap <silent> <Right> :<C-u>call <SID>try_wincmd('ObviousResizeRight', '>')<CR>

nnoremap <silent> <CR> :<C-u>call <SID>try('Switch', "\015")<CR>

" Make Y consistent with C and D
nnoremap Y y$

" Paste over a visual selection while preserving the unnamed register
xnoremap P "_dP

" Q repeats the last command-line command (Ex mode is still accessible via gQ)
nnoremap Q @:

" Linewise movement should work on screen lines
noremap k gk
noremap j gj
noremap gk k
noremap gj j

" Clear search highlighting and any message already displayed
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Expand %% to directory of current file in command-line mode
cnoremap %% <C-r>=fnameescape(expand("%:~:h"))<CR>/

" Easier mapping to insert word under cursor when searching
cnoremap <expr> <Tab> getcmdtype() =~# '[/?]' ? "\<C-r>\<C-w>" : "\<C-z>"

" Use character under cursor as first character in digraph and replace it
" Ex.:
"   Pressing <Leader>k- on the 'e' in
"     habere
"   Makes
"     habēre
nnoremap <expr> <Leader>k util#editing#NormalModeDigraph(nr2char(getchar()))

" Look up documentation with Dash.app
function! s:doc(cmd)
  if &keywordprg =~# "^man"
    return a:cmd
  endif
  return "K"
endfunction

nmap <expr> K <SID>doc("\<Plug>DashSearch")
nmap <expr> <Leader>K <SID>doc("\<Plug>DashGlobalSearch")

" Remove the last character on current line:
" This is something I find myself doing often, but I find it difficult to hit
" '$' quickly. This has the added bonus of working on a range of lines and
" being repeatable.
noremap <silent> <Plug>RemoveLastCharacter :normal! $x<CR>
      \ :silent! call repeat#set("\<Plug>RemoveLastCharacter")<CR>
nmap <Leader>x <Plug>RemoveLastCharacter
xmap <Leader>x <Plug>RemoveLastCharacter

" Swap single and double quotes
noremap <silent> <Plug>SwapQuotesN :<C-u>keeppatterns
      \ s/['"]/\="'\""[submatch(0)!='"']/ge<CR>
      \ :silent! call repeat#set("\<Plug>SwapQuotesN")<CR>
noremap <silent> <Plug>SwapQuotesX :<C-u>keeppatterns
      \ '<,'>s/['"]/\="'\""[submatch(0)!='"']/ge<CR>
      \ :silent! call repeat#set("\<Plug>SwapQuotesX")<CR>
nmap <Leader>' <Plug>SwapQuotesN
xmap <Leader>' <Plug>SwapQuotesX

" Shortcut for inserting date and time in various formats
" from @tpope. The repeat(..., 0) makes it such that there's
" no output from <C-r>=
inoremap <silent> <C-g><C-t> <C-r>=repeat(complete(col('.'), map([
      \ "%Y-%m-%d %H:%M:%S",
      \ "%Y-%m-%d",
      \ "%Y %b %d",
      \ "%d-%b-%y",
      \ "%a, %d %b %Y %H:%M:%S %z",
      \ "%a %b %d %T %Z %Y"
      \ ], 'strftime(v:val)')), 0)<CR>

" <C-y> and <C-e> insert to end of word instead of single characters
" (Note that this clobbers <C-y>'s function when the completion popup is
" visible--this is by design, as it is cumbersome in combination with YCM's
" autocompletion)
inoremap <expr> <C-y> matchstr(getline(line('.') - 1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')
inoremap <expr> <C-e> matchstr(getline(line('.') + 1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')

" :help dispatch-commands
nnoremap <F2> :Make<CR>
nnoremap <F3> :Dispatch<CR>
nnoremap <F4> :Start<CR>

" Write buffer and source current file
nnoremap <silent> <Leader>W :write<CR>:source %<CR>

" Write a one-off timestamped version of the current buffer
nnoremap <Leader>T :write %:p:r_<C-r>=strftime('%Y%m%d-%H%M%S')<CR>.%:e<CR>

" Source selection or current line
xnoremap <Leader>S y:execute @@<CR>:echomsg "Sourced selection"<CR>
nnoremap <Leader>S ^vg_y:execute @@<CR>:echomsg "Sourced current line"<CR>

" Remove trailing whitespace, merge consecutive empty lines
nnoremap <silent> <Leader>w :call util#editing#NormalizeWhitespace()<CR>

" Re-indent entire buffer
nnoremap <silent> <Leader>= :call util#editing#ReindentBuffer()<CR>

" Yank entire buffer
nnoremap <silent> <Leader>y :call util#editing#YankBuffer()<CR>

" Shortcuts for Fugitive plug-in
nnoremap <Leader>gg :Git<Space>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gb :Gblame<CR>
xnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>g/ :Ggrep<Space>

nnoremap <Leader>t :Transmit<CR>

" Traversing folds
nnoremap <C-k> zMzkzv[zzt
nnoremap <C-j> zMzjzvzt

" sleuth.vim likes to change 'shiftwidth' to 8
nnoremap <Leader>4 :setlocal tabstop=4 softtabstop=4 shiftwidth=4<CR>

" Switch to alternate window or buffer
nnoremap <silent> <Leader>6 :if winnr("$") > 1
      \ <Bar>wincmd p<Bar>else<Bar>buffer #<Bar>endif<CR>

nnoremap <Leader>8 :set hlsearch<CR>*<C-o>
nnoremap <Leader>/ :vimgrep // **/*.<C-r>=expand("%:e")<CR>
      \ <Home><Right><Right><Right><Right><Right><Right><Right><Right><Right>
map <BS> %

" Unimpaired.vim-like toggles
nnoremap [oo :set colorcolumn=+1<CR>
nnoremap ]oo :set colorcolumn=0<CR>
nnoremap coo :let &colorcolumn = ( &colorcolumn == "+1" ? "0" : "+1" )<CR>

nnoremap [, :SidewaysLeft<CR>
nnoremap ], :SidewaysRight<CR>

omap aa <Plug>SidewaysArgumentTextobjA
xmap aa <Plug>SidewaysArgumentTextobjA
omap ia <Plug>SidewaysArgumentTextobjI
xmap ia <Plug>SidewaysArgumentTextobjI

" Force a file type
nnoremap _cs :set filetype=css<CR>
nnoremap _er :set filetype=eruby<CR>
nnoremap _ht :set filetype=html<CR>
nnoremap _js :set filetype=javascript<CR>
nnoremap _md :set filetype=markdown<CR>
nnoremap _ph :set filetype=php<CR>
nnoremap _py :set filetype=python<CR>
nnoremap _rb :set filetype=ruby<CR>
nnoremap _sh :set filetype=sh<CR>
nnoremap _tx :set filetype=text<CR>
nnoremap _vi :set filetype=vim<CR>
nnoremap _xm :set filetype=xml<CR>

" <Leader> mappings for navigating files and buffers
nnoremap <Leader><Leader> :CtrlPBuffer<CR>
nnoremap <Leader>; :CtrlP<CR>
nnoremap <Leader>. :CtrlP .<CR>
nnoremap <Leader>' :CtrlPBookmarkDir<CR>
nnoremap <Leader>" :CtrlPBookmarkDirAdd<CR>
nnoremap <Leader>~ :CtrlP $HOME<CR>
nnoremap <Leader>, :CtrlPTag<CR>
nnoremap <Leader>? :CtrlPMRU<CR>
nnoremap <Leader>] :tjump /
nnoremap <Leader>D :edit README.md<CR>
nnoremap <Leader>E :edit Gemfile<CR>
nnoremap <Leader>H :edit .htaccess<CR>
nnoremap <Leader>I :edit .gitignore<CR>
nnoremap <Leader>M :edit Makefile<CR>
nnoremap <Leader>R :edit Rakefile<CR>
nnoremap <Leader>U :edit Guardfile<CR>
nnoremap <Leader>b :buffer <C-z><S-Tab>
nnoremap <Leader>d :CtrlPDir<CR>
nmap     <Leader>e :edit %%<C-z><S-Tab>
nnoremap <Leader>l :CtrlPLine<CR>
nnoremap <Leader>m :CtrlPMixed<CR>
nnoremap <Leader>n :CtrlP $NOTES<CR>
nnoremap <Leader>p :CtrlP $PROJECTS<CR>
nnoremap <Leader>v :CtrlPRTS<CR>

" }}}
" Plug-in Settings                                                             {{{
" --------------------------------------------------------------------------------

" delimitMate settings
let g:delimitMate_balance_matchpairs = 1
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

let g:UltiSnipsListSnippets = "<C-g><Tab>"
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<Tab>"
let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
let g:UltiSnipsSnippetsDir = "~/.vim/snips"
let g:UltiSnipsSnippetDirectories = ["snips"]

let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1,
      \ 'html': 1,
      \ }
let g:ycm_complete_in_strings = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
" Remove <Tab> from maps lest YCM hijack our mapping from above
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']

" Disable splitjoin.vim maps (we define our own above)
let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''

" Default of 'a' conflicts with Sideways argument text objects mapped above
let g:targets_argTrigger = 'A'

" :help ctrlp-options
let g:ctrlp_cache_dir = $HOME."/.vim/tmp/cache/ctrlp"
if !isdirectory(g:ctrlp_cache_dir) && exists("*mkdir")
  call mkdir(g:ctrlp_cache_dir, "p", 0700)
endif
let g:ctrlp_working_path_mode = 0
let g:ctrlp_extensions = ["tag", "dir", "bookmarkdir", "line", "rtscript"]
let g:ctrlp_user_command = {
      \ 'types': {
      \   1: [".git", "cd %s && git ls-files -co --exclude-standard"],
      \   2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': 'find %s -path .git -prune -o -type f'
      \ }
let g:ctrlp_abbrev = {
      \ 'gmode': 't',
      \ 'abbrevs': [
      \   { 'pattern': '^a ', 'expanded': 'app/'        },
      \   { 'pattern': '^b ', 'expanded': 'bin/'        },
      \   { 'pattern': '^c ', 'expanded': 'controller/' },
      \   { 'pattern': '^e ', 'expanded': 'message/'    },
      \   { 'pattern': '^f ', 'expanded': 'config/'     },
      \   { 'pattern': '^h ', 'expanded': 'helper/'     },
      \   { 'pattern': '^l ', 'expanded': 'lib/'        },
      \   { 'pattern': '^m ', 'expanded': 'model/'      },
      \   { 'pattern': '^o ', 'expanded': 'log/'        },
      \   { 'pattern': '^p ', 'expanded': 'template/'   },
      \   { 'pattern': '^s ', 'expanded': 'spec/'       },
      \   { 'pattern': '^t ', 'expanded': 'test/'       },
      \   { 'pattern': '^v ', 'expanded': 'view/'       },
      \ ]}
let g:ctrlp_status_func = {
      \   "main": "util#ctrlp#Statusline1",
      \   "prog": "util#ctrlp#Statusline2",
      \ }

" :help syntastic-global-options
let g:syntastic_mode_map = { 'passive_filetypes': ['html', 'less'] }
if &termencoding ==# "utf-8" || &encoding ==# "utf-8"
  let g:syntastic_error_symbol         = "\u276f\u276f"
  let g:syntastic_warning_symbol       = "\u276f"
  let g:syntastic_style_error_symbol   = "\u276f\u276f"
  let g:syntastic_style_warning_symbol = "\u276f"
endif
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_enable_highlighting      = 0
let g:syntastic_stl_format = ' %E{%e' . g:syntastic_error_symbol
let g:syntastic_stl_format .= ' (line %fe)}'
let g:syntastic_stl_format .= '%B{ }'
let g:syntastic_stl_format .= '%W{%w' . g:syntastic_warning_symbol
let g:syntastic_stl_format .= ' (line %fw)} '

let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_php_checkers = ['php']

" :help syntastic-config-makeprg
" Don't complain about indentation with tabs, set encoding
let g:syntastic_php_phpcs_post_args = "--tab-width=4 --encoding=utf-8"
" Use PSR2 standard instead of default PEAR
" http://www.php-fig.org/psr/2/
let g:syntastic_php_phpcs_post_args .= " --standard=PSR2"

" Sparkup shadows the very useful <C-e> as well as <C-n>/<C-p>
let g:sparkupDoMaps = 0

let g:markdown_fold_override_foldtext = 0

" Specify syntaxes to import for Markdown code blocks
let g:markdown_fenced_languages = ["sh", "vim", "ruby"]

let g:jekyll_dispatch = 'rake build'
let g:jekyll_start = 'rake watch'

" Prevent csv.vim from setting its own 'foldtext'
let g:csv_disable_fdt = 1

" :help ruby.vim
let g:ruby_no_comment_fold = 1

" :help menu.vim
let g:did_install_default_menus = 1
let g:did_install_syntax_menu = 1

" }}}
" Local vimrc                                                                  {{{
" --------------------------------------------------------------------------------

" Include a local configuration file if available. It is sourced at the end so
" that any local settings override those in this file.
runtime vimrc.local

" }}}
" vim: fdm=marker:sw=2:sts=2:et
