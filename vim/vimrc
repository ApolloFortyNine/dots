" General settings                                                             {{{
" --------------------------------------------------------------------------------

if has("vim_starting") && filereadable($HOME."/.vim/bundle/vim-pathogen/autoload/pathogen.vim")
  runtime bundle/vim-pathogen/autoload/pathogen.vim
  call pathogen#infect()        " Manage 'runtimepath' with pathogen.vim
endif

if has("autocmd")
  filetype plugin indent on     " File-type detection, plug-ins, indent scripts
endif
if has("syntax") && !exists("g:syntax_on")
  syntax enable                 " Enable syntax highlighting
endif

"=category Color schemes
"=bundle noahfrederick/vim-hemisu
"=bundle noahfrederick/vim-noctu
if &t_Co >= 16
  silent! colorscheme noctu     " Set color scheme for 16-color+ terminals
endif

if &shell =~# "fish$"
  set shell=/bin/bash           " Ensure shell is POSIX compatible
endif

set encoding=utf-8              " Use UTF-8 as default file encoding
set spelllang=en_us             " Language and region to use for spellchecking
set shortmess+=I                " Suppress intro message when starting Vim
set laststatus=2                " Always show status line
set ruler                       " Show cursor position if status line not visible
set modeline modelines=5        " Look for modeline at beginning/end of file
set hidden                      " Allow buffers to become hidden
set autoread                    " Reload unchanged buffer when file changes
set history=500                 " Keep 500 lines of command-line history
set scrolloff=2                 " Keep lines above/below cursor visible
set sidescrolloff=5             " Keep columns left/right of cursor visible
set display+=lastline           " Show as much as possible of wrapped last line
set foldnestmax=3               " Limit depth of nested syntax/indent folds
set foldopen-=block             " Do not open folds on '(', '{', etc.
set helpheight=1000             " Maximize help window vertically
set previewheight=20            " Preview window used for, e.g., :Gstatus
set lazyredraw                  " Do not redraw screen during macro execution
set formatoptions+=j            " Remove extra comment char when joining lines
set fillchars=vert:\ ,diff:\    " Use space for vertical split, diff fill char
if has("linebreak")             " Wrap lines at word boundaries
  set linebreak
  set showbreak=...
endif
set nowrap                      " Do not wrap long lines by default
set listchars=tab:>\ ,eol:$,extends:>,precedes:<,nbsp:+
if &termencoding ==# "utf-8" || &encoding ==# "utf-8"
  let &fillchars = "vert:\u2502,diff: "
  let &listchars = "tab:\u25b8 ,eol:\u00ac,extends:\u276f,precedes:\u276e,nbsp:\u2334"
  if has("linebreak")
    let &showbreak = "\u21aa"
  endif
  highlight VertSplit ctermbg=NONE guibg=NONE
endif

if has("unnamedplus")
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

"" Command line and completion
set wildmenu                    " Command line completion
set wildcharm=<C-z>
set cmdheight=2                 " Reserve two lines for command area
set completeopt+=longest        " Only insert longest common string
set pumheight=8                 " Limit height of popup menu
set showcmd                     " Show incomplete key sequences
set path=.,**                   " Path used by gf, :find, et alia

"" Whitespace
set autoindent
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode
set tabstop=4                   " Width of displayed tabs--the rest is taken care of by sleuth.vim
set shiftround                  " Round indent to multiple of 'shiftwidth'
set nojoinspaces                " Do not insert two spaces after '.' when using J

"" Swaps and backups
if !strlen($SUDO_USER) && has("unix")
  " Don't store swaps in . -- store in ~/.vim/tmp/swap/%path%to%orig.swp
  set directory=~/.vim/tmp/swap//,.,/var/tmp
  " Don't store backups in . -- store in ~/.vim/tmp/backup/%path%to%orig~
  set backupdir=~/.vim/tmp/backup//,.,/var/tmp
  " Create tmp/ dir if it doesn't exist
  if !isdirectory($HOME."/.vim/tmp") && exists("*mkdir")
    call mkdir($HOME."/.vim/tmp/swap", "p", 0700)
    call mkdir($HOME."/.vim/tmp/backup", "p", 0700)
  endif
else
  set nobackup
  set nowritebackup
  set noswapfile
endif

"" Searching
set incsearch                   " Do incremental searching
set smartcase                   " Case-sensitivity triggered by capital letter if 'ignorecase' set

"" Status line
let g:statusline_separator_left = " \u27e9 "
let g:statusline_separator_right = " \u27e8 "

let &statusline = ""
let &statusline .= " %{fnamemodify(getcwd(), ':t:~')}"
let &statusline .= g:statusline_separator_left
let &statusline .= "%f"
let &statusline .= "%#StatusLineNC#%{StatuslineGit()}%* "
let &statusline .= '%1*%{&modified && !&readonly?"\u25cf":""}%*'
let &statusline .= '%1*%{&modified && &readonly?"\u25cb":""}%*'
let &statusline .= '%2*%{&modifiable?"":"\u25cb"}%*'
let &statusline .= '%3*%{&readonly && &modifiable && !&modified?"\u25cb":""}%*'
let &statusline .= "%="
let &statusline .= "%#StatuslineNC#%{strlen(&fenc)?&enc:&fenc}%* "
let &statusline .= '%{strlen(&ft)?&ft:"n/a"}'
let &statusline .= g:statusline_separator_right
let &statusline .= "%3.l:%-3.c "
let &statusline .= '%#Error#%{exists("*SyntasticStatuslineFlag")?SyntasticStatuslineFlag():""}%*'

" In many terminal emulators the mouse works just fine, thus enable it.
if has("mouse")
  set mouse=a
endif

" Load matchit.vim, if a newer version isn't already installed
if !exists("g:loaded_matchit") && findfile("plugin/matchit.vim", &runtimepath) ==# ""
  runtime! macros/matchit.vim
endif

" }}}
" Functions & commands                                                         {{{
" --------------------------------------------------------------------------------

" Git branch/commit in status line
function! StatuslineGit()
  if !exists('*fugitive#head')
    return ''
  endif
  let l:out = fugitive#head(8)
  if l:out !=# ''
    let l:out = ' @ ' . l:out
  endif
  return l:out
endfunction

" Execute commands without moving cursor, changing search pattern
"
" - First parameter is a function name to call as a string
" - Second (optional) parameter is an array of arguments to pass to the
"   function
function! g:Preserve(func, ...)
  let l:FuncRef = function(a:func)
  if a:0 > 0
    let l:args = a:1
  else
    let l:args = []
  endif

  let l:saved_search = @/
  let l:saved_view = winsaveview()

  let l:return_value = call(l:FuncRef, l:args)

  call winrestview(l:saved_view)
  let @/ = l:saved_search

  return l:return_value
endfunction

function! s:NormalizeWhitespace()
  " 1. Strip trailing whitespace
  %substitute/\s\+$//e
  " 2. Merge consecutive blank lines
  %substitute/\n\{3,}/\r\r/e
  " 3. Strip empty line from end of file
  %substitute/\n\+\%$//e
endfunction

function! s:ReindentBuffer()
  normal! gg=G
endfunction

function! s:YankBuffer()
  normal! ggyG
endfunction

function! s:NormalModeDigraph(char2)
  let l:char1 = matchstr(getline('.'), '.', byteidx(getline('.'), col('.') - 1))
  echo 'digraph: ' . l:char1 . a:char2
  return "r\<C-k>" . l:char1 . a:char2
endfunction

command! -bang -bar Bdelete call helper#buffer#Bdelete(<q-bang>)
command! -bang -nargs=? -complete=buffer Bufonly call helper#buffer#Bufonly(<q-args>, <q-bang>)
command! -nargs=0 -bar FollowSymlink call helper#path#FollowSymlink()

if exists("$NOTES")
  function! s:CompleteNote(A, L, P)
    return helper#path#CompleteHead($NOTES, '*.md', a:A, a:L, a:P)
  endfunction
  command! -bang Today execute "edit<bang> $LOGBOOK/" . strftime("%Y-%m-%d") . ".md"
  command! -nargs=1 -bang Notes lvimgrep<bang> /\<<args>\>/ $NOTES/**/*.md <Bar> lopen
  command! -nargs=1 -bang -complete=customlist,<SID>CompleteNote Note execute "edit<bang> $NOTES/" . fnameescape(<q-args>) . ".md"
endif

" Toggle light/dark background
command! -nargs=0 -bar BackgroundInvert let &background = ( &background == "dark" ? "light" : "dark" )

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command! DiffOrig vertical new | set buftype=nofile | read # | 0delete_
  \ | diffthis | wincmd p | diffthis

" 'Quickfix do' analogous to :argdo, :bufdo, etc.
command! -nargs=1 Cdo call helper#Cdo(<q-args>)

command! -nargs=* -bar Spore call spore#exec(<q-args>)
" }}}
" Autocommands                                                                 {{{
" --------------------------------------------------------------------------------

if has("autocmd")
  augroup FileTypeOptions
    autocmd!

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text,markdown setlocal textwidth=78 wrap

    " Always use spelling for particular file types
    autocmd FileType gitcommit setlocal spell

    " Append semicolon or comma to end of line in insert mode
    autocmd FileType c,cpp,css,javascript,php inoremap <buffer> ;; <Esc>A;
    autocmd FileType c,cpp,css,javascript,php inoremap <buffer> ,, <Esc>A,
    autocmd FileType php,ruby inoremap <buffer> <C-l> <Space>=><Space>

    " Automatically complete closing tags
    autocmd FileType html,liquid,markdown,php,xml inoremap <buffer> </ </<C-x><C-o>
    autocmd FileType html,liquid,xml setlocal textwidth=120

    " CSS-like languages
    autocmd FileType css,less setlocal foldmethod=marker
    autocmd FileType css,less setlocal foldmarker={,}

    " Ruby folding
    autocmd FileType ruby setlocal foldlevel=2 foldmethod=syntax

    " csv.vim
    autocmd FileType csv map <buffer> ( H
    autocmd FileType csv map <buffer> ) L

    " Convert single-line HTML tag to Jade
    " TODO Preserve attributes
    autocmd FileType jade nnoremap <buffer> <LocalLeader>j :normal! ^xwdf>$F<D^<CR>

    " Keep separate spell file for Vim scripting
    autocmd FileType vim,help setlocal
      \ spellfile=~/.vim/spell/en.utf-8.add,~/.vim/spell/vim.utf-8.add
    autocmd FileType vim setlocal keywordprg=:help

    " Do not highlight current line in quickfix window as it overlaps the
    " current item highlight
    autocmd FileType qf setlocal wrap nocursorline

    " Set format options for Apache config files
    autocmd FileType apache setlocal comments=:# commentstring=#\ %s
      \ formatoptions-=t formatoptions+=croql

    " Set options for fish scripts
    autocmd FileType fish silent! compiler fish
    autocmd FileType fish setlocal textwidth=78 foldmethod=expr

    " Never show line numbers in help buffers
    autocmd FileType help set nonumber

    " Set the file type for common Ruby files not ending in .rb
    autocmd BufRead,BufNewFile {Rakefile,Guardfile} set filetype=ruby
  augroup END

  set cursorline
  augroup CursorLine
    autocmd!

    " Only highlight cursor line in active buffer window
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * if &filetype == 'qf' | set nocursorline | else | set cursorline | endif
  augroup END

  highlight! link TrailingWhitespace Error
  augroup TrailingWhiteSpace
    autocmd!
    autocmd BufWinEnter * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd InsertEnter * if &modifiable | match TrailingWhitespace /\s\+\%#\@<!$/ | endif
    autocmd InsertLeave * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd BufWinLeave * if &modifiable | call clearmatches() | endif
  augroup END

  augroup Cmdwin
    autocmd!
    " Never show line numbers in command-line window as they are not useful
    " and take up space (normally it inherits this setting like any other
    " window)
    autocmd CmdwinEnter * set nonumber
  augroup END
endif

" }}}
" Mappings                                                                     {{{
" --------------------------------------------------------------------------------

" Make Y consistent with C and D
nnoremap Y y$

" Q repeats the last command-line command (Ex mode is still accessible via gQ)
nnoremap Q @:

" Linewise movement should work on screen lines
noremap k gk
noremap j gj
noremap gk k
noremap gj j

" The arrow keys are suitable for window resizing since it's not a common
" action and they can be held down
noremap <Down> <C-w>+
noremap <Up> <C-w>-
noremap <Left> <C-w><
noremap <Right> <C-w>>

" Turn off highlighting and clear any message already displayed
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Expand %% to directory of current file in command-line mode
cnoremap %% <C-r>=fnameescape(expand("%:h"))."/"<CR>

" Convenient ways to open files relative to current buffer
map <Leader>ew :edit %%
map <Leader>es :split %%
map <Leader>ev :vsplit %%
map <Leader>et :tabedit %%

" Use character under cursor as first character in digraph and replace it
" Ex.:
"   Pressing <Leader>k- on the 'e' in
"     habere
"   Makes
"     habēre
nnoremap <expr> <Leader>k <SID>NormalModeDigraph(nr2char(getchar()))

" Look up documentation with Dash.app (analogous to K command)
nmap <Leader>K <Plug>DashSearch

" Remove the last character on current line:
" This is something I find myself doing often, but I find it difficult to hit
" '$' quickly. This has the added bonus of working on a range of lines and
" being repeatable.
noremap <silent> <Plug>RemoveLastCharacter :normal! $x<CR>:silent! call repeat#set("\<Plug>RemoveLastCharacter")<CR>
nmap <Leader>x <Plug>RemoveLastCharacter
xmap <Leader>x <Plug>RemoveLastCharacter

" Shortcut for inserting date and time in various formats
" from @tpope. The repeat(..., 0) makes it such that there's
" no output from <C-r>=
inoremap <silent> <C-g><C-t> <C-r>=repeat(complete(col('.'), map([
  \ "%Y-%m-%d %H:%M:%S",
  \ "%Y-%m-%d",
  \ "%Y %b %d",
  \ "%d-%b-%y",
  \ "%a, %d %b %Y %H:%M:%S %z",
  \ "%a %b %d %T %Z %Y"
  \ ], 'strftime(v:val)')), 0)<CR>

" :help dispatch-commands
nnoremap <F2> :Make<CR>
nnoremap <F3> :Dispatch<CR>

" Write buffer and source current file
nnoremap <silent> <Leader>w :write<CR>:source %<CR>

" Write a one-off timestamped version of the current buffer
nnoremap <Leader>T :write %:p:r_<C-r>=strftime('%Y%m%d-%H%M%S')<CR>.%:e<CR>

" Source selection or current line
xnoremap <Leader>S y:execute @@<CR>:echomsg "Sourced selection"<CR>
nnoremap <Leader>S ^vg_y:execute @@<CR>:echomsg "Sourced current line"<CR>

" Remove trailing whitespace, merge consecutive empty lines
nnoremap <silent> <Leader>W :call g:Preserve('<SID>NormalizeWhitespace')<CR>

" Re-indent entire buffer
nnoremap <silent> <Leader>= :call g:Preserve('<SID>ReindentBuffer')<CR>

" Yank entire buffer
nnoremap <silent> <Leader>y :call g:Preserve('<SID>YankBuffer')<CR>

" sleuth.vim likes to change 'shiftwidth' to 8
nnoremap <Leader>4 :setlocal tabstop=4 softtabstop=4 shiftwidth=4<CR>

" Show highlighting groups for current word
nnoremap <silent> <Leader>p :call helper#SynStack()<CR>

" Shortcuts for Fugitive plug-in
nnoremap <Leader>gg :Git<Space>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gb :Gblame<CR>
xnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>g/ :Ggrep<Space>

" Git Gutter plug-in complements Fugitive
nnoremap <Leader>gu :GitGutterToggle<CR>
nnoremap <Leader>gh :GitGutterLineHighlightsToggle<CR>

" Shortcuts for delimitMate
nnoremap <Leader>dd :DelimitMateSwitch<CR>
nnoremap <Leader>dr :DelimitMateReload<CR>

" Traversing folds
nnoremap <C-k> zMzkzv[zzt
nnoremap <C-j> zMzjzvzt

" Switch to alternate window or buffer
nnoremap <silent> <Leader><Leader> :if winnr("$") > 1<Bar>wincmd p<Bar>else<Bar>buffer #<Bar>endif<CR>

nnoremap <Leader><CR> *<C-o>
map <BS> %
nnoremap <Leader>/ :vimgrep // **/*.<C-r>=expand("%:e")<CR>
  \ <Home><Right><Right><Right><Right><Right><Right><Right><Right><Right>

" Unimpaired.vim-like toggles
nnoremap [oo :set colorcolumn=+1<CR>
nnoremap ]oo :set colorcolumn=0<CR>
nnoremap coo :let &colorcolumn = ( &colorcolumn == "+1" ? "0" : "+1" )<CR>

" <Space> mappings for navigating files and buffers
nnoremap <Space><Space> :CtrlPMixed<CR>
nnoremap <Space>. :CtrlP .<CR>
nnoremap <Space>; :CtrlPBuffer<CR>
nnoremap <Space>' :CtrlPBookmarkDir<CR>
nnoremap <Space>" :CtrlPBookmarkDirAdd<CR>
nnoremap <Space>~ :CtrlP $HOME<CR>
nnoremap <Space>, :CtrlPTag<CR>
nnoremap <Space>/ :CtrlPLine<CR>
nnoremap <Space>? :CtrlPMRU<CR>
nnoremap <Space>D :edit README.md<CR>
nnoremap <Space>E :edit Gemfile<CR>
nnoremap <Space>G :edit $HOME/.dots/vim/gvimrc<CR>
nnoremap <Space>H :edit .htaccess<CR>
nnoremap <Space>I :edit .gitignore<CR>
nnoremap <Space>L :edit $HOME/.vimrc.local<CR>
nnoremap <Space>M :edit Makefile<CR>
nnoremap <Space>N :Notes<Space>
nnoremap <Space>R :edit Rakefile<CR>
nnoremap <Space>U :edit Guardfile<CR>
nnoremap <Space>V :edit $HOME/.dots/vim/vimrc<CR>
nnoremap <Space>b :buffer <C-z><S-Tab>
nnoremap <Space>c :CtrlP $HOME/.dots<CR>
nnoremap <Space>d :CtrlPDir<CR>
nnoremap <Space>f :CtrlP<CR>
nnoremap <Space>m :CtrlPMixed<CR>
nnoremap <Space>n :CtrlP $NOTES<CR>
nnoremap <Space>p :CtrlP $PROJECTS<CR>
nnoremap <Space>v :CtrlPRTS<CR>

" }}}
" Plug-ins                                                                     {{{
" --------------------------------------------------------------------------------

"=category General-purpose utilities
"=bundle AndrewRadev/splitjoin.vim
"=bundle AndrewRadev/switch.vim
"=bundle Raimondi/delimitMate
" delimitMate settings
" Off by default as it breaks the dot command and abbreviations
let g:delimitMade_offByDefault = 1
let g:delimitMate_balance_matchpairs = 1
" These options unfortunately prevent triggering abbrevs with <CR> and <Space>
" (see https://github.com/Raimondi/delimitMate/issues/145)
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

"=bundle SirVer/ultisnips
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<Tab>"
let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
let g:UltiSnipsSnippetDir = "~/.vim/snippets"
let g:UltiSnipsSnippetDirectories = ["snippets"]

"=bundle Valloric/YouCompleteMe build: 'cd ~/.vim/bundle/YouCompleteMe && ./install.sh'
" Only enable YouCompleteMe for certain file types
let g:ycm_filetype_whitelist = {
      \ 'php': 1,
      \ 'vim': 1,
      \ 'python': 1,
      \ 'javascript': 1,
      \ 'ruby': 1,
      \ 'css': 1,
      \ 'less': 1
      \ }
let g:ycm_complete_in_strings = 0
let g:ycm_autoclose_preview_window_after_insertion = 1

"=bundle eiginn/netrw
"=bundle ervandew/supertab
" :help supertab-options
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabLongestEnhanced = 1
let g:SuperTabLongestHighlight = 1

" :help supertab-completionchaining
if has("autocmd")
  augroup SuperTabRC
    autocmd!
    autocmd FileType *
      \ if exists("*SuperTabChain") && &omnifunc != "" |
      \   call SuperTabChain(&omnifunc, "<C-p>") |
      \   call SuperTabSetDefaultCompletionType("<C-x><C-u>") |
      \ endif
  augroup END
endif

"=bundle godlygeek/tabular
"=bundle kana/vim-textobj-user
"=bundle kien/ctrlp.vim
" :help ctrlp-options
let g:ctrlp_cache_dir = $HOME."/.vim/tmp/cache/ctrlp"
if !isdirectory(g:ctrlp_cache_dir) && exists("*mkdir")
  call mkdir(g:ctrlp_cache_dir, "p", 0700)
endif
let g:ctrlp_working_path_mode = 0
let g:ctrlp_extensions = ["tag", "dir", "bookmarkdir", "line", "rtscript"]
let g:ctrlp_user_command = [".git", "cd %s && git ls-files . -co --exclude-standard"]
let g:ctrlp_abbrev = {
  \ 'gmode': 't',
  \ 'abbrevs': [
    \ { 'pattern': '^a ', 'expanded': 'app/'        },
    \ { 'pattern': '^b ', 'expanded': 'bin/'        },
    \ { 'pattern': '^c ', 'expanded': 'controller/' },
    \ { 'pattern': '^e ', 'expanded': 'message/'    },
    \ { 'pattern': '^f ', 'expanded': 'config/'     },
    \ { 'pattern': '^h ', 'expanded': 'helper/'     },
    \ { 'pattern': '^l ', 'expanded': 'lib/'        },
    \ { 'pattern': '^m ', 'expanded': 'model/'      },
    \ { 'pattern': '^o ', 'expanded': 'log/'        },
    \ { 'pattern': '^p ', 'expanded': 'template/'   },
    \ { 'pattern': '^s ', 'expanded': 'spec/'       },
    \ { 'pattern': '^t ', 'expanded': 'test/'       },
    \ { 'pattern': '^v ', 'expanded': 'view/'       },
    \ ]
  \ }

"=bundle mattn/vim-textobj-url
"=bundle noahfrederick/vim-skeleton
"=bundle rizzatti/dash.vim
"=bundle rizzatti/funcoo.vim
"=bundle scrooloose/syntastic
" :help syntastic-global-options
let g:syntastic_mode_map = { 'passive_filetypes': ['html'] }
if &termencoding ==# "utf-8" || &encoding ==# "utf-8"
  let g:syntastic_error_symbol = "\u276f\u276f"
  let g:syntastic_warning_symbol = "\u276f"
  let g:syntastic_style_error_symbol = "\u276f\u276f"
  let g:syntastic_style_warning_symbol = "\u276f"
endif
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_enable_highlighting = 0
let g:syntastic_stl_format = ' %E{%e' . g:syntastic_error_symbol
let g:syntastic_stl_format .= ' (line %fe)}'
let g:syntastic_stl_format .= '%B{ }'
let g:syntastic_stl_format .= '%W{%w' . g:syntastic_warning_symbol
let g:syntastic_stl_format .= ' (line %fw)} '

let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_php_checkers = ['php']

" :help syntastic-config-makeprg
" Don't complain about indentation with tabs, set encoding
let g:syntastic_php_phpcs_post_args = "--tab-width=4 --encoding=utf-8"
" Use PSR2 standard instead of default PEAR
" http://www.php-fig.org/psr/2/
let g:syntastic_php_phpcs_post_args .= " --standard=PSR2"

"=bundle tpope/vim-abolish
"=bundle tpope/vim-commentary
"=bundle tpope/vim-dispatch
"=bundle tpope/vim-endwise
"=bundle tpope/vim-eunuch
"=bundle tpope/vim-fugitive
"=bundle tpope/vim-obsession
"=bundle tpope/vim-pathogen
"=bundle tpope/vim-repeat
"=bundle tpope/vim-sleuth
"=bundle tpope/vim-speeddating
"=bundle tpope/vim-surround
"=bundle tpope/vim-unimpaired
"=bundle tpope/vim-vinegar

"=category Language-specific utilities
"=bundle chrisbra/csv.vim
" Prevent csv.vim from setting its own 'foldtext'
let g:csv_disable_fdt = 1

"=bundle dbakker/vim-lint
"=bundle dbakker/vim-sparkup
" Sparkup shadows the very useful <C-e> as well as <C-n>/<C-p>
let g:sparkupDoMaps = 0

"=bundle nelstrom/vim-markdown-folding
let g:markdown_fold_override_foldtext = 0

"=bundle nelstrom/vim-textobj-rubyblock
"=bundle tpope/vim-bundler
"=bundle tpope/vim-rails
"=bundle tpope/vim-rake
"=bundle tpope/vim-rbenv

"=category File-type runtime files
"=bundle dag/vim-fish
"=bundle digitaltoad/vim-jade
"=bundle groenewege/vim-less
"=bundle juvenn/mustache.vim
"=bundle othree/html5.vim
"=bundle puppetlabs/puppet-syntax-vim
"=bundle tpope/vim-git
"=bundle tpope/vim-liquid
"=bundle tpope/vim-markdown
" Specify syntaxes to import for Markdown code blocks
let g:markdown_fenced_languages = ["sh", "php", "vim", "ruby"]

" :help ruby.vim
let g:ruby_no_comment_fold = 1

" :help menu.vim
let g:did_install_default_menus = 1
let g:did_install_syntax_menu = 1

" }}}
" Local vimrc                                                                  {{{
" --------------------------------------------------------------------------------

" Include a local configuration file if available. It is sourced at the end so
" that any local settings override those in this file.
if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" }}}
" vim: fdm=marker:sw=2:sts=2:et
